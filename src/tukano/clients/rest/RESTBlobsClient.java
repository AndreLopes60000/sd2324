package tukano.clients.rest;

import java.net.URI;

import jakarta.ws.rs.client.Entity;
import jakarta.ws.rs.client.WebTarget;
import tukano.api.rest.RestBlobs;
import tukano.controlers.blobs.Blobs;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import tukano.helpers.Result;
import tukano.helpers.Result;

public class RESTBlobsClient extends RESTClient implements Blobs{


    /**
	 * Stores the target server
	 */
	final WebTarget target;


	/**
	 * Constructor
	 * @param serverURI server URI
	 */
	public RESTBlobsClient(URI serverURI ) {
		super( serverURI );
		target = client.target( serverURI ).path( RestBlobs.PATH );
	}

    @Override
    public Result<Void> upload(String blobId, byte[] bytes) {
        return super.reTry(() -> client_upload(blobId, bytes));
    }


    @Override
    public Result<byte[]> download(String blobId) {
        return super.reTry(() -> client_download(blobId));
    }
    
    /**
	 * Uploads a short video blob resource. Must validate the blobId to ensure it
	 * was generated by the Shorts service.
	 * 
	 * @param String blobId the identifier generated by the Shorts service for this
	 *               blob
	 * @param bytes  the contents in bytes of the blob resource
	 * 
	 * @return OK(void) if the upload is new or if the blobId and bytes match an
	 *         existing blob;
	 *         CONFLICT if a blobId exists but bytes do not match;
	 *         FORBIDDEN if the blobId is not valid
	 */
    private Result<Void> client_upload(String blobId, byte[] bytes) {
        Response r = target.path( blobId )
                .request()
				.accept(MediaType.APPLICATION_JSON)
				.post(Entity.entity(bytes, MediaType.APPLICATION_OCTET_STREAM));
		return super.toJavaResult(r, Void.class);
    }

    /**
	 * Downloads a short video blob resource in a single byte chunk of bytes.
	 * 
	 * @param blobId the id of the blob;
	 * @return (OK, bytes), if the blob exists;
	 * 			 NOT_FOUND, if no blob matches the provided blobId
	 */
    private Result<byte[]> client_download(String blobId) {
        Response r = target.path( blobId )
                .request()
				.accept(MediaType.APPLICATION_JSON)
				.get();
		return super.toJavaResult(r, byte[].class);
    }
    
}
